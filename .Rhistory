dpois(1400,1787)
dpois(9,5)
dpois(9,5,lowe.tail=FALSE)
dpois(9,5,lower.tail=FALSE)
ppois(9,5,lower.tail=FALSE)
ppois(9,5)
ppois(999,1787)
ppois(.559,1)
ppois(6,10)
999/1787
10/1787
ppois(10/1787,1)
ppois(10/1787,1,lower.tail=FALSE)
ppois(5.59,1)
ppois(.559,1)
ppois(6,10)
ppois(6,lambda=10)
ppois(5,lambda=10)
ppois(5.5,lambda=10)
ppois(5.7,lambda=10)
ppois(6,lambda=10)
ppois(60,lambda=100)
ppois(61,lambda=100)
ppois(16,lambda=12)
ppois(160,lambda=120)
ppois((50, 100, 160),lambda=120)
ppois(c(50, 100, 160),lambda=120)
ppois(c(5, 10, 16),lambda=12)
ppois(c(5, 10, 16),lambda=100)
ppois(c(50, 100, 160),lambda=100)
ppois(c(5, 10, 16),lambda=12)
ppois(6,lambda=10)
ppois(7,lambda=10)
ppois(5,lambda=10)
sp <- sqrt((8 * 1.5^2 + 8 * 1.8^2)/(16))
sp
-3 - 1 + c(-1, 1) * qt(0.975, 16) * sp * (1/9 + 1/9)^0.5
sp <- sqrt((8*1.5^2 + 8*1.8^2)/16)
-3 - 1 + c(-1, 1) * qt(0.975, 16) * sp * (1/10+ 1/10)^0.5
-3 - 1 + c(-1, 1) * qt(0.995, 16) * sp * (1/10+ 1/10)^0.5
-3 - 1 + c(-1, 1) * qt(0.999, 16) * sp * (1/10+ 1/10)^0.5
-3 - 1 + c(-1, 1) * qt(0.99, 16) * sp * (1/10+ 1/10)^0.5
-3 - 1 + c(-1, 1) * qt(0.975, 16) * sp * (1/10+ 1/10)^0.5
-3 - 1 + c(-1, 1) * qt(0.995, 16) * sp * (1/10+ 1/10)^0.5
-3 - 1 + c(-1, 1) * qt(0.999999, 16) * sp * (1/10+ 1/10)^0.5
-3 - 1 + c(-1, 1) * qt(0.999, 16) * sp * (1/10+ 1/10)^0.5
-3 - 1 + c(-1, 1) * qt(0.9995, 16) * sp * (1/10+ 1/10)^0.5
-3 - 1 + c(-1, 1) * qt(0.99995, 16) * sp * (1/10+ 1/10)^0.5
-3 - 1 + c(-1, 1) * qt(0.999995, 16) * sp * (1/10+ 1/10)^0.5
qnorm(.95, 0, 1)
qnorm(.95, 0, 0.004)
1.645/0.004
1.645+.01
pnorm(qnorm(.95, 0, 1)+.01,lower.tail=FALSE)
pnorm(qnorm(.95, 0, 1)-.01,lower.tail=FALSE)
pnorm(qnorm(.95, 0, 1)+.01/.004,lower.tail=FALSE)
.01/.004
pnorm(qnorm(.95, 0, 1)+2.5,lower.tail=FALSE)
pnorm(1.645+2.5,lower.tail=FALSE)
pnorm(1.645+2.5)
qnorm(.95, 0, 1)
qnorm(.95, 0, .004)
1.645*.00
1.645*.004
pnorm(0.006579, 0.01, 0.004)
pnorm(0.006579, 0.01, 0.004, lower.tail=FALSE)
power.t.test(delta = .01, sd = .04, sig.level = 0.05,
power = .9,
type = paired",
alternative = one.sided",
strict = FALSE)
power.t.test(delta = .01, sd = .04, sig.level = 0.05,
power = .9,
type = paired",
alternative = one.sided")
power.t.test(delta = .01, sd = .04, sig.level = 0.05,
power = .9,
type = "paired",
alternative = "one.sided")
12/sqrt(288)
44-42.04
pnorm(1.96,0,0.7)
1-pnorm(1.96,0,0.7)
2*(1-pnorm(1.96,0,0.7))
2*(1-pnorm(1.96,0,0.71))
12 + c(-1,1)*qt(0.95,99)*.04
12 + c(-1,1)*qt(0.975,99)*.04
12 + c(-1,1)*qt(0.95,99)*.04
12 + c(-1,1)*qt(0.95,99)*.4
c(-1,1)*qt(0.95,99)*.4
x=c(-8,-3,-1,-2,-5)
t.test(x)
t.test(x,paired=TRUE)
t.test(x,paired = TRUE)
t.test(x,"paired" = TRUE)
x=c(140,138,150,148,135)
y=c(132,135,151,146,130)
t.test(x,y,"paired" = TRUE)
pbinom(3,4,.5,lower.tail=false)
pbinom(3,4,.5,lower.tail=FALSE)
binom.test(7,8)
binom.test(6,8)
binom.test(3,4)
binom.test(3,4,alternative="l")
binom.test(3,4,alternative="g")
12/sqrt(288)
pnorm(1.96,0,0.7)
pnorm(1.96,0,12/sqrt(288))
pnorm(-1.96,0,12/sqrt(288))
a=44
s=12
n=288
xbar=42.04
z <- (xbar-a)/(s/sqrt(n))
z
2*pnorm(-abs(z))
12/sqrt(288)
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
install.package("impute")
instal.package("impute")
install.packages("impute")
install.packages("impute")
source("http://bioconductor.org/biocLite.R")
biocLite("impute")
library("impute")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
y=x*w
y
y/7
sum(y)/sum(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x
y
lm(I(x)~I(y)-1,data=cbind(t(x),t(y)))
lm(I(x)~I(y),-1,data=cbind(t(x),t(y)))
lm(I(x)~I(y)-1,data=cbind(t(x),t(y)))
linear <- lm(y~x-1)
View(linear)
I(x)
linear
linear <- lm(x~y-1)
linear
data(mtcars)
Q3=data(mtcars)
View(Q3)
install.packages("dataset")
install.packages("datasets")
install.packages("datasets")
library(datasets)
Q3=data(mtcars)
View(Q3)
Q3=data("mtcars")
View(Q3)
Q3=data("mtcars",package="datasets")
View(Q3)
View(mtcars)
lm(I(mpg-mean(mpg))~I(weight-mean(weight))-1,data=mtcars)
lm(I(mpg-mean(mpg))~I(wt-mean(wt))-1,data=mtcars)
lm(I(mpg-mean(mpg))~I(wt-mean(wt))-1,data=mtcars)
lm(I(child-mean(child))~I(parent-mean(parent))-1,data=galton)
lm(I(mpg-mean(mpg))~I(wt-mean(wt)),data=mtcars)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(x)
sd(x)
(x-mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
linear <- lm(y~x)
linear
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
swirl()
library(swirl)
swirl()
exit()
Exit()
quit()
swirl()
library(swirl)
swirl()
ones <- rep(1, nrow(galton))
lm(child~ones + parent -1,galton)
lm(child~ parent,galton)
lm(child ~ 1, galton)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
fit
trees2 <- eliminate("Girth", trees)
head(trees2)
View(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
2
exit(swirl)
library(swirl)
swirl()
View(swiss)
all <- lm(Fertility ~ ., swiss)
summary(all)
all <- lm(Fertility ~ agriculture, swiss)
all <- lm(Fertility ~ Agriculture, swiss)
all <- lm(Fertility ~ ., swiss)
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Education,swiss$Examination)
cor(swiss$Education,swiss$Agriculture)
makelms()
swiss$ec=swiss$Examination+swiss$Catholic
ec=swiss$Examination+swiss$Catholic
ec<-swiss$Examination+swiss$Catholic
efit=lm(Fertility~.+ec,swiss)
fit$coefficients-efit$coefficiens
all$coefficients-efit$coefficiens
all$coefficients-efit$coefficients
library(UsingR)
mtcars
View(mtcars)
swirl()
fit=lm(mpg~wt+factor(cyl),mtcars)
fit
33.991-3.206*2.6-6.071
summary(lm(mpg~factor(cyl),mtcars))
summary(lm(mpg~factor(cyl)+wt+wt*factor(cyl),mtcars))
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
swirl()
6
View(InsectSprays)
dim(InsectSprays)
head(InsectSprays)
head(InsectSprays,15)
sA
summary(InsectSprays[,2])
sapply(IsectSpray)
sapply(class(IsectSpray)
sapply(class,IsectSpray)
sapply(class,IsectSprays)
sapply(IsectSprays,class)
sapply(InsectSprays,class)
lm(count~spray,InsectSprays)
fit <- lm(count ~ spray, InsectSprays)
fit$coef
summary(fit)$coef
est=summary(fit)$coef[,1]
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count ~ spray - 1, InsectSprays)
summary(nfit)$coef
spray2 <- relevel(C,InsectSprays$spray)
spray2 <- relevel("C",InsectSprays$spray)
spray2 <- relevel(InsectSprays$spray,"C")
fit2 <- lm(count ~ spray, InsectSprays)
fit2 <- lm(count ~ spray2, InsectSprays)
View(InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[2]-fit$coef[3])/1.6011
pairs(mtcars)
?influence.measures
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit=lm(y~x)
hatvalues(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit=lm(y~x)
dfbeta(fit)
hatvalues(fit)
fit$coef
.1288595-.9312924
x <- c(0.586, 0.166, -0.042, -0.614)
y <- c(0.549, -0.026, -0.127, -0.751)
fit=lm(y~x)
fit$coef
.1288595-1.0601519
dfbeta(fit)
plot(x,y)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
plot(x,y)
fit=lm(y~x)
dfbeta(fit)
fit$coef
hatvalues(fit)
fit=lm(y~x-1)
hatvalues(fit)
dfbeta(fit)
hatvalues(fit)[5]-dfbeta(fit)[5]
fit$coef[5]-dfbeta(fit)[5]
fit$coef
fit$coef-dfbeta(fit)[5]
dfbetas(fit)
hatvalues(fit)
fit=lm(y~x)
dfbetas(fit)
dfbeta(fit)
View(mtcars)
fit=lm(mpg~cyl+wt,mtcars)
fit1=update(fit,mpg~cyl+wt+wt*cyl)
anova(fit,fit1)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
lm(mpg ~ I(wt) + factor(cyl), data = mtcars)
summary(mtcars$cyl)
summary(factor(mtcars$cyl))
lm(mpg ~ I(wt*2) + factor(cyl), data = mtcars)
Vew(mtcars)
View(mtcars)
fit
fit=lm(mpg~factor(am),mtcars)
fit
fit1=update(mpg~factor(am)+hp,mtcars)
fit1
fit1=lm(mpg~factor(am)+hp,mtcars)
fit1
mean(mtcars$mpg)
lm(mpg~am,mtcars)
summary(lm(mpg~am,mtcars))
getwd()
getwd()
install.packages("caret")
lirary(caret)
library(caret)
library(kernLab)
library(kernlab)
install.packages(kernlab)
install.packages("kernlab")
library(kernlab)
library()
installed.packages()
packages=installed.packages()
View(packages)
args(train.default)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
View(predictors)
testing = mixtures[-inTrain,]
source('~/Downloads/ML1.R')
ibrary(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
source('~/Downloads/ML1.R')
View(testing)
View(training)
featurePlot(training, plot="pairs")
featurePlot(x=training, y=training$CompressiveStrengths,plot="pairs")
featurePlot(x=training, y=training$CompressiveStrength,plot="pairs")
qplot(FlyAsh, CompressiveStrength,data=training)
featurePlot(x=training, y=training$CompressiveStrength,plot="pairs")
qplot(Cement, CompressiveStrength,data=training)
qplot(BlastFurnaceSlag, CompressiveStrength,data=training)
qplot(Cement, CompressiveStrength,data=training)
qplot(Water, CompressiveStrength,data=training)
qplot(Superplasticizer, CompressiveStrength,data=training)
qplot(CoarseAggregate, CompressiveStrength,data=training)
qplot(FineAggregate, CompressiveStrength,data=training)
qplot(Age, CompressiveStrength,data=training)
install.packages("Hmisc")
library("Hmisc")
cut2(training$CompressiveStrength,q=10)
cut2(training$CompressiveStrength,g=10)
CS1=cut2(training$CompressiveStrength,g=10)
featurePlot(x=training, y=CS1,plot="pairs",color=CS2)
featurePlot(x=training, y=CS1,plot="pairs",color=CS1)
qplot(training$Cement, CS1,color=CS1)
qplot(training$Cement, data$ComprehenssiveStrength,color=CS1)
qplot(training$Cement, data$CompressiveStrength,color=CS1)
qplot(training$Cement, CS1,color=CS1)
featurePlot(x=training, y=CS1,plot="pairs",color=CS1)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer+1))
hist(log(training$Superplasticizer+1))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer+1))
source('~/Downloads/ML1.R')
View(training)
training%IL*
training$IL%
grep("IL", names(training), value=TRUE)
IL = grep("IL", names(training), value=TRUE)
View(IL)
IL=IL[,1:12]
IL=IL[1:12,]
IL=IL[1:12]
View(IL)
training(,IL)
training[,IL]
tr_IL=training[,IL]
View(tr_IL)
PreProc = PreProcess(tr_IL,method="pca",pcaComp=9)
PreProc = PreProcess(tr_IL,method="pca",pcaComp=9)
library(caret)
PreProc = PreProcess(tr_IL,method="pca",pcaComp=9)
class(tr_IL)
PreProc = preProcess(tr_IL,method="pca",pcaComp=9)
PreProc
PreProc = preProcess(tr_IL,method="pca",thresh=.8)
PreProc
var=c(tr_IL,training$diagnosis)
tr_IL_PC=predict(preProc, tr_IL)
View(PreProc)
class(PreProc)
predict(PreProc,tr_IL)
tr_IL_PC=predict(preProc, tr_IL)
PreProc_tr=predict(PreProc,tr_IL)
modelFit1= train(diagnosis~.,method="glm",PreProc_tr)
modelFit1= train(diagnosis ~ .,method="glm",data=c(PreProc_tr,diagnosis)
modelFit1= train(diagnosis ~ .,method="glm",data=c(PreProc_tr,diagnosis))
modelFit1= train(diagnosis ~ .,method="glm",data=c(PreProc_tr,diagnosis[,training]))
View(diagnosis)
dim(diagnosis)
size(diagnosis)
diagnosis[training,]
diagnosis[,training]
modelFit1= train(diagnosis ~ .,method="glm",data=PreProc_tr)
View(tr_IL)
tr_IL = c(tr_IL,training$diagnosis)
PreProc = preProcess(tr_IL,method="pca",thresh=.8)
tr_IL=training[,IL]
PreProc = preProcess(tr_IL,method="pca",thresh=.8)
modelFit1= train(diagnosis ~ .,method="glm",data=c(PreProc_tr,training$diagnosis)
modelFit1= train(diagnosis ~ .,method="glm",data=c(PreProc_tr,training$diagnosis))
dta= c(PreProc_tr,training$diagnosis)
modelFit1
View(dta)
size(PreProc_tr)
dim(PreProc_tr)
dim(training$diagnosis)
training$diagnosis
length(training$diagnosis)
dta= c(PreProc_tr,t(training$diagnosis))
View(dta)
dta= c(PreProc_tr,factor(training$diagnosis))
View(dta)
grep("^[IL]", names(training), value=TRUE)
grep("^IL", names(training), value=TRUE)
tr_IL=training[,c(IL,diagnosis]
tr_IL=training[,c(IL,diagnosis)]
tr_IL=training[,c(IL,"diagnosis")]
View(tr_IL)
source('~/Downloads/ML1.R')
source('~/Downloads/ML1.R')
source('~/Downloads/ML1.R')
View(test_IL)
tr_IL[-13]
PreProc = preProcess(tr_IL[-13],method="pca",thresh=.8)
View(PreProc_tr)
modelFit1= train(tr_IL$diagnosis ~ .,method="glm",data=PreProc_tr)
train(tr_IL$diagnosis ~ .,method="glm",data=PreProc_tr)
install.packages("e1071")
library(e1071)
modelFit1= train(tr_IL$diagnosis ~ .,method="glm",data=PreProc_tr)
modelFit2= train(tr_IL$diagnosis ~ .,method="glm",data=tr_IL)
source('~/Downloads/ML1.R')
confusionMatrix(test_IL$diagnosis,predict(modelFit1,test_PC))
confusionMatrix(test_IL$diagnosis,predict(modelFit2,test_IL))
getwd()
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
trainIndex = createDataPartition(diagnosis, p = 0.5,list=FALSE)
PreProc1 = preProcess(tr_IL[-13],method="pca",thresh=.9)
PreProc1
getwd()
getwd()
getwd()
wd()
setwd("/Users/lumavasiljevic/Desktop")
getwd()
wd()
dir()
setwd("/Users/lumavasiljevic/Desktop/Data Science Spec - Coursera")
dir()
setwd("/Users/lumavasiljevic/Desktop/Data Science Spec - Coursera/R scripts")
dir()
setwd("/Users/lumavasiljevic/Desktop/Data Science Spec - Coursera/R scripts/courses-master")
dir()
setwd("/Users/lumavasiljevic/Desktop/Data Science Spec - Coursera/R scripts/courses-master/07_RegressionModels")
dir()
setwd("/Users/lumavasiljevic/Desktop/Data Science Spec - Coursera/R scripts/ML")
dir()
source('~/Desktop/Data Science Spec - Coursera/R scripts/ML/ML1.R')
confusionMatrix(test_IL$diagnosis,predict(modelFit1,test_PC))
confusionMatrix(test_IL$diagnosis,predict(modelFit2,test_IL))
dir()
setwd("PR-WRITE-UP")
dir()
setwd("ML-project")
dir()
source('~/Desktop/Data Science Spec - Coursera/R scripts/ML/PR-WRITE-UP/ML-project-writeup.R', echo=TRUE)
getwd()
dir()
dir()
dir()
getwd()
getwd()
dir()
source('~/Desktop/Data Science Spec - Coursera/R scripts/ML/PR-WRITE-UP/ML-project-writeup.R')
